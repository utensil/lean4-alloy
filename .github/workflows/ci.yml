name: CI

on:
  push:
    branches:
      - master
      - 'stage/**'
  pull_request:
    branches:
      - master

jobs:
  build:
    name: ${{ matrix.name || 'Build' }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: ${{ matrix.shell || 'sh' }}
    strategy:
      matrix:
        include:
        - name: Ubuntu
          os: ubuntu-latest
        - name: MacOS
          os: macos-latest
        - name: Windows
          os: windows-latest
          shell: bash {0}
      # complete all jobs
      fail-fast: false
    steps:
    - name: Install elan on Ubuntu and macOS
      if: runner.os == 'Linux' || runner.os == 'macOS'
      shell: bash -euo pipefail {0}
      run: |
        curl -sSfL https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh | sh -s -- -y --default-toolchain none
        echo "$HOME/.elan/bin" >> $GITHUB_PATH
    - name: Install elan on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        curl -O --location https://raw.githubusercontent.com/leanprover/elan/master/elan-init.ps1
        .\elan-init.ps1 -NoPrompt 1 -DefaultToolchain none
        echo "$HOME\.elan\bin" >> $env:GITHUB_PATH
    - name: package install
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          sudo apt update
          sudo apt install -y curl wget git clang lld libc++-dev
        elif [[ "${{ runner.os }}" == "macOS" ]]; then
          echo "Running on macOS"
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "Running on Windows"
        else
          echo "Unsupported OS"
        fi
    - name: Checkout
      uses: actions/checkout@v2
    - name: Check Lean
      run: lean --version
    - name: Build
      run: lake build
    - name: Upload Build
      continue-on-error: true
      uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}
        path: .lake/build
    - name: Test (Unix)
      if: matrix.os != 'windows-latest'
      run: ./test.sh
    - name: Setup MSYS2 (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        path-type: inherit
        install: mingw-w64-x86_64-clang
    - name: Test (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: ./test.sh
